server and db gives output from the website side and we show it with HTMl 

why js?
JS allows us to build up client side. running file inside the client side

Benefits
1. Running computationaly fast in client side
2. Interactive -directly manipulte webpage - DOM

but html shows - nested text, structure

but when we add
<script> 

</script>
- it becomes interactive

event driving programming
- click, scroll, hover or anything
JS listens to the each interuption


variables in the js 

we see all on the alert message, but how we can see on the page


=== - is equal both VALUE / TYPE
== - is equal Value

in order to insert value inside string
backtick - ` [not ']

alert(`Counter now is ${counter}`)



in chrome
right click > inspect > console   #for finding error in JS file

document.addEventListener(event_type[click,hover or anythin], function )
document.addEventListener('DOMContentLoaded',function() {
            
        })
## when html button is on line 20 and funciton of that button is in line 18, it can not see button, gives error, solution is the Event listener 


document.querySelector('tag')
document.querySelector('#id')
document.querySelector('.class')



colors.html
Data attributes
which help us to differentiate the colors with one function rather than 3 different functions for each button
querySelectorAll - returns array for all buttons

forEach - run function for each element of the array

button.dataset.color

.dataset - is for the accessing to the content of the html 

this.value
#this special selector for the drop down menue in order to identify which value is selected


EVENTS of JS
onclick
onmouseover
onkeydown
onkeyup
onload
onblur



#in order to make code work in local storage

localStorage.getItem(key)
localStorage.setItem(key, value)

#js objects
which we use to get APIs data
json - java script object notation



FILE ORDERS WITH EXPLANATIONS
hello.html 
counter.html (variables)
counter.js
colors.html
tasks.html  - this time with the JS fully, not SQL